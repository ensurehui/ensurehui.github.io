{"meta":{"title":"Hexo","subtitle":"","description":"","author":"辉锅锅","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"Battery Historian工具安装","slug":"Battery-Historian工具安装","date":"2020-03-09T15:44:15.000Z","updated":"2020-03-09T15:48:12.977Z","comments":true,"path":"2020/03/09/Battery-Historian工具安装/","link":"","permalink":"http://yoursite.com/2020/03/09/Battery-Historian%E5%B7%A5%E5%85%B7%E5%AE%89%E8%A3%85/","excerpt":"","text":"1.安装Go语言 Go语言下载 安装Go 配置GOROOT和GOPATH 注意：系统环境变量与用户环境变量，本人修改的为系统环境变量，后续以管理员身份运行git bash。 配置GOROOT：告诉Go命令和其他相关工具，哪里找到安装在电脑上的Go包，配置Go的安装目录 配置GOPATH：可以理解为是工程的目录，创建一个Go的工程路径 配置环境变量，把Go的bin目录放到path环境变量中 在Path中配置环境变量 2.安装git Git下载 按照步骤进行安装 安装完检查：命令行输入git version 3.安装python python下载，注意仅支持python2.7 配置环境变量，添加Path的路径，为Python的安装路径 命令行输入python -V，检查是否安装成功 4.安装Java Java下载 按照步骤安装 配置环境变量 新建-&gt;变量名”JAVA_HOME”，变量值为JDK的安装路径 编辑Path-&gt;加入”%JAVA_HOME%\\bin”和”%JAVA_HOME%\\jre\\bin” 新建-&gt;变量名”CLASSPATH”,变量值.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\tools.jar” 5.下载Battery Historian源码并且运行 管理员身份打开Git Bash 输入命令：go get -d -u github.com/google/battery-historian/… 进入到$GOPATH/src/github.com/google/battery-historian目录下方 输入go run setup.go #Compile Javascript files using the Closure compiler 运行Battery Historian 输入命令：go run cmd/battery-historian/battery-historian.go 浏览器打开输入http://localhost:9999 6.遇到的常见问题1. git clone出现fatal: unable to access ‘https://github.com/...&#39; 的解决办法发生这种情况是因为代理是在git中配置的。既然它是https代理（而不是http）git config http.proxy和git config –global http.proxy也无济于事。 解决方案一 ：1、看看你的git配置 git config --global -l如果你没有任何与https代理相关的内容，例如https_proxy = …问题不在这里。 如果您有与https代理相关的内容，请将其从〜/ .gitconfig文件中删除，然后重试。2、如果仍然不起作用，请取消设置环境变量 env|grep -i proxy 你应该有一行或几行https_proxy = … 使用以下内容逐个取消设置：取消设置https_proxy（或HTTPS_PROXY，具体取决于变量的名称）3、再次检查环境变量 env|grep -i proxy如果它没有显示任何你应该是好的。 注意：此解决方案可以应用于http和https代理问题。只是变量名称从https更改为http。 解决方案二: 在开启shadowsocks的前提下，手动配置git的代理。git客户端输入如下两个命令就可以了。 git config --global http.proxy http://127.0.0.1:1080 git config --global https.proxy http://127.0.0.1:1080http:// 也可以改成sockets5://,但是区别在于：socks5不支持通过pubkey免密登录github，每次提交代码只能输入用户名和密码。http可以支持免密登录。 取消代理： git config --global --unset http.proxy git config --global --unset https.proxy2. 运行go run setup.go这一步出错，出错信息如下： error: RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054 解决方法： 出现此问题有可能是上传大小限制，执行如下命令： git config –global http.postBuffer 524288000 524288000算法：10241024500 依然报错，可尝试： git config –global http.sslVerify “false” error: RPC failed; curl 18 transfer closed with outstanding read data remain 究其原因是因为curl的postBuffer的默认值太小，我们需要调整它的大小，在终端重新配置大小。 git config –global http.postBuffer 524288000 卡在Download closure-library…,半天下载不下来，可以手动下载 注意：如果下载closure-library的最新版，运行go run setup.go命令时会出现error:github.com/google/battery-historian/third_party/closure-library/closure/goog/streams/full_test_cases.js:635: ERROR - Parse error. ‘(‘ expected 建议下载2017以前版本，下载地址https://github.com/google/closure-library/releases/tag/v20161201 本人安装方法，手动安装closure-library的库后，在运行go run setup.go 成功运行后的结果：","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-09T14:29:58.269Z","updated":"2020-03-09T14:29:58.269Z","comments":true,"path":"2020/03/09/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/09/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}